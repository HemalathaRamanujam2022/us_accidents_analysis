terraform {
  required_providers {
    google = {
      source  = "hashicorp/google"
      version = "5.6.0"
    }
  }
}

provider "google" {
  credentials = file(var.credentials)
  project     = var.project
  region      = var.region
  zone        = var.zone
}


variable "gcp_service_list" {
  description ="The list of apis necessary for the project"
  type = list(string)
  default = [
    "cloudresourcemanager.googleapis.com",
    "serviceusage.googleapis.com",
    "compute.googleapis.com",
    "iam.googleapis.com",
    "dataproc.googleapis.com",
    "bigquery.googleapis.com"
  ]
}

resource "google_project_service" "gcp_services" {
  for_each = toset(var.gcp_service_list)
  project = var.project
  service = each.key
  disable_on_destroy = false
}


resource "time_sleep" "gcp_wait_crm_api_enabling" {
  depends_on = [
    google_project_service.gcp_services
  ]

  create_duration = "5m"
}


resource "google_compute_instance" "test-machine" {
  #Waits for the Compute Engine API to be enabled
  depends_on = [time_sleep.gcp_wait_crm_api_enabling]
 
  name         = "us-accidents-test-machine"
  machine_type = var.machine_type
  zone         = var.zone

  boot_disk {
    initialize_params {
      image = var.image
      labels = {
        }
    }
  }

  network_interface {
    network = "default"

    access_config {
      // Ephemeral public IP
    }
  }

  metadata_startup_script = file("./setup_docker.sh")
}



resource "google_dataproc_cluster" "mycluster" {
  # Waits for the Compute Engine API to be enabled
  depends_on = [time_sleep.gcp_wait_crm_api_enabling]

  name     = var.dataproc_name
  region   = var.region
  graceful_decommission_timeout = "120s"

  cluster_config {
    gce_cluster_config {
    zone = var.zone
    internal_ip_only = false
    }

    master_config {
      num_instances = 1
      machine_type  = var.machine_type
      disk_config {
        boot_disk_type    = "pd-ssd"
        boot_disk_size_gb = 30
      }
    }

    worker_config {
      num_instances  = 0
    }
   
    # You can define multiple initialization_action blocks
    initialization_action {
      script      = "gs://dataproc-initialization-actions/stackdriver/stackdriver.sh"
      timeout_sec = 500
    }
  }
  

}


/*
resource "google_dataproc_cluster" "my_dataproc_cluster" {
  name     = var.dataproc_name
  region   = var.region
  graceful_decommission_timeout = "120s"
  labels = {
    goog-dataproc-autozone = "enabled",
    goog-dataproc-cluster-name = var.dataproc_name,
    goog-dataproc-location = var.region
  }
}
*/

# For GCS, the location type is Region
resource "google_storage_bucket" "demo-bucket" {

  depends_on = [time_sleep.gcp_wait_crm_api_enabling]

  name          = var.gcs_bucket_name
  location      = var.region
  force_destroy = true


  lifecycle_rule {
    condition {
      age = 90
    }
    action {
      type = "AbortIncompleteMultipartUpload"
    }
  }
  
}

resource "google_bigquery_dataset" "demo_dataset" {

  # Waits for the Compute Engine API to be enabled
  depends_on = [time_sleep.gcp_wait_crm_api_enabling]


  dataset_id = var.bq_dataset_name
  location   = var.region

  

}




